# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Article {
  articleId: String!
}

type Game {
  away: String!
  gameId: String!
  home: String!
  result: String!
  time: String!
}

input GameInput {
  gameId: String!
  year: String!
}

type Goalie {
  birthDate: String!
  firstName: String!
  gamesPlayed: Float!
  gamesPlayedOnIce: Float!
  gamesStarted: Float!
  goalsAgainst: Float!
  goalsAgainstAverage: Float!
  height: Float!
  lastName: String!
  losses: Float!
  minutesInPlay: String!
  nationality: String!
  number: Float!
  playerId: String!
  position: String!

  """Player rank for requested season and sortOrder"""
  rank: Float!
  saves: Float!
  savesPercentage: Float!
  shotsOnGoal: Float!
  shutOuts: Float!
  ties: Float!

  """
  True if the number of games is enough for the statistics to be correctly calculated
  """
  validRanking: Boolean!
  weight: Float!
  wins: Float!
}

input GoaliesInput {
  sortOrder: GoaliesSortOrder = SavesPercent
  year: String!
}

enum GoaliesSortOrder {
  GoalsAgainst
  GoalsAgainstAverage
  Lost
  MinutesInPlay
  Saves
  SavesPercent
  ShooutOuts
  Tied
  Won
}

type Query {
  articles(input: TeamInput): [Article!]!
  game(input: GameInput!): Game
  games(input: StatisticsInput!): [Game!]
  goalies(input: GoaliesInput!): [Goalie!]
  skaters(input: SkatersInput!): [Skater!]
  standings(input: StatisticsInput!): [StandingsEntry!]
  team(input: TeamInput!): Team
  teams: [Team!]!
  videos(input: TeamInput): [Video!]!
}

type Skater {
  assists: Float!
  birthDate: String!
  blockedShots: Float!
  firstName: String!
  gameWinningGoals: Float!
  gamesPlayed: Float!
  goals: Float!
  height: Float!
  hits: Float!
  lastName: String!
  minus: Float!
  nationality: String!
  number: Float!
  penaltyMinutes: Float!
  playerId: String!
  plus: Float!
  plusMinus: Float!
  position: String!
  powerPlayGoals: Float!

  """Player rank for requested season and sortOrder"""
  rank: Float!
  shotsOnGoal: Float!
  totalOnIce: String!
  totalOnIceSeconds: Float!
  totalPoints: Float!

  """
  True if the number of games is enough for the statistics to be correctly calculated
  """
  validRanking: Boolean!
  weight: Float!
}

input SkatersInput {
  sortOrder: SkatersSortOrder = Points
  year: String!
}

enum SkatersSortOrder {
  Assists
  Goals
  Hits
  PenaltyMinutes
  PlusMinus
  Points
}

type StandingsEntry {
  goals: Float!
  goalsAgainst: Float!
  onePoints: Float!
  plusMinus: Float!
  points: Float!
  rank: Float!
  teamCode: String!
  teamId: String!
  teamName: String!
  threePoints: Float!
  twoPoints: Float!
  zeroPoints: Float!
}

input StatisticsInput {
  year: String!
}

type Team {
  finals: String!
  founded: String!
  golds: String!
  holyNumbers: String
  teamCode: String!
}

input TeamInput {
  teamCode: String!
}

type Video {
  videoId: String!
}
